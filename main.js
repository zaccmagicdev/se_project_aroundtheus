!function(){"use strict";const e={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__input_error_visible"},t=document.querySelector("#edit-button"),s=document.querySelector(".profile__add-button"),r=document.querySelector("#profile__modal-form"),n=document.querySelector("#add-image__modal-form"),i=document.querySelector("#edit-avatar__pic-form"),o=document.querySelector("#profile-modal__input-name"),a=document.querySelector("#profile-modal__input-description"),d=document.querySelector(".profile__avatar-button");class l{constructor(e,t,s,r,n){let{name:i,link:o,id:a,isLiked:d}=e;this._name=i,this._link=o,this._id=a,this._isLiked=d,this._cardSelector=t,this._handleCardClick=s,this._handleDeleteCard=r,this._handleCardLike=n}_renderLikes(){const e=this._cardElement.querySelector(".card__like-button");this._isLiked?e.classList.add("card__like-button_clicked"):e.classList.remove("card__like-button_clicked")}_setEventListeners(){this._cardElement.querySelector(".card__like-button").addEventListener("click",(()=>{this._handleCardLike()})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._handleDeleteCard()})),this._cardElement.querySelector("#card-image-button").addEventListener("click",(()=>{this._handleCardClick({name:this._name,link:this._link})}))}setIsLiked(e){this._isLiked=e,this._renderLikes()}isLiked(){return this._isLiked}delete(){this._cardElement.remove()}generateCard(){this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0);const e=this._cardElement.querySelector(".card__caption"),t=this._cardElement.querySelector(".card__image");return e.textContent=this._name,t.setAttribute("alt",this._name),t.setAttribute("src",this._link),this._setEventListeners(),this._renderLikes(),this._cardElement}}class c{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);t.textContent=e.validationMessage,t.classList.add(this._errorClass),e.classList.add(this._inputErrorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);t.textContent="",t.classList.remove(this._errorClass),e.classList.remove(this._inputErrorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(e){return!e.every((e=>e.validity.valid))}_toggleButtonState(){this._hasInvalidInput(this._inputList)?this._disableButton():(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.removeAttribute("disabled",!0))}_disableButton(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)}_setEventListeners(){this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._buttonElement=this._form.querySelector(this._submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(t=>{t.preventDefault(),this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault(),this._disableButton()})),this._setEventListeners()}}class h{constructor(e){this._modal=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}_handleEscClose(e){"Escape"===e.key&&this.close()}open(){this._modal.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._modal.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._modal.querySelector(".modal__exit-button").addEventListener("click",(()=>{this.close()})),this._modal.addEventListener("mousedown",(e=>{this._modal.classList.contains("modal_opened")&&e.target===this._modal&&this.close()}))}}class _ extends h{constructor(e,t){super(e),this._modalForm=this._modal.querySelector(".modal__form"),this._modalButton=this._modal.querySelector(".modal__button"),this._modalButtonText=this._modalButton.textContent,this._modalInputs=this._modalForm.querySelectorAll(".modal__input"),this._handleFormSubmit=t}_getInputValues(){const e=new FormData(this._modalForm);return Object.fromEntries(e)}renderLoading(e){this._modalButton.textContent=e?"Saving...":this._modalButtonText}setEventListeners(){this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}close(){super.close(),this._modalForm.reset()}}const u=new class{constructor(e){this._url=e.url,this._headers=e.headers}_processResponse=e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`);async getUserData(){return fetch(this._url+"/users/me",{method:"GET",headers:this._headers}).then(this._processResponse)}async getInitialCards(){return fetch(this._url+"/cards",{method:"GET",headers:this._headers}).then(this._processResponse)}async uploadCard(e,t){return fetch(this._url+"/cards",{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then(this._processResponse)}async deleteCard(e){return fetch(this._url+`/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._processResponse)}async getCardsAndUserData(){return Promise.all([this.getInitialCards(),this.getUserData()])}async likeCard(e){return fetch(this._url+`/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._processResponse)}async unlikeCard(e){return fetch(this._url+`/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._processResponse)}async setProfileData(e,t){return fetch(this._url+"/users/me",{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(this._processResponse)}async updateProfilePic(e){return fetch(this._url+"/users/me/avatar",{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._processResponse)}}({url:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"a087da59-6aa1-4dbf-8a2c-982e97da6080","Content-Type":"application/json"}});u.getCardsAndUserData().then((e=>{let[t,s]=e;t.forEach((e=>{const t=y({name:e.name,link:e.link,id:e._id,isLiked:e.isLiked});k.addItem(t)}));const{avatar:r,about:n,name:i}=s;m.setUserInfo({name:i,about:n}),m.setAvatar(r)})).catch((e=>console.log(e)));const m=new class{constructor(e,t,s){this._nameElement=document.querySelector(e),this._jobElement=document.querySelector(t),this._avatarImage=document.querySelector(s)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}setUserInfo(e){this._nameElement.textContent=e.name,this._jobElement.textContent=e.about}setAvatar(e){this._avatarImage.src=e}}("#user-name","#user-career",".profile__avatar"),p=new class extends h{constructor(e){super(e),this._modalImage=this._modal.querySelector(".modal__enlarged-image"),this._modalCaption=this._modal.querySelector(".modal__enlarged-text")}open(e,t){this._modalImage.setAttribute("src",t),this._modalImage.setAttribute("alt",e),this._modalCaption.textContent=e,super.open()}}("#enlarged-modal-box"),E=new class extends h{constructor(e){super(e),this._modalForm=this._modal.querySelector(".modal__form"),this._modalButton=this._modal.querySelector(".modal__button"),this._modalButtonText=this._modalButton.textContent}setAction(e){this._handleFormSubmit=e}renderLoading(e){this._modalButton.textContent=e?"Deleting...":this._modalButtonText}setEventListeners(){this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit()})),super.setEventListeners()}}("#confirm-modal"),L=new _("#avatar-edit-modal",(e=>{L.renderLoading(!0),u.updateProfilePic(e["avatar-link"]).then((e=>{m.setAvatar(e.avatar),L.close()})).finally((()=>L.renderLoading(!1))).catch((e=>console.log(e)))})),v=new _("#add-modal-box",(e=>{v.renderLoading(!0),u.uploadCard(e["add-img-title"],e["add-img-link"]).then((e=>{const{name:t,link:s,_id:r,isLiked:n}=e;k.prependItem(y({name:t,link:s,id:r,isLiked:n})),v.close()})).finally((()=>v.renderLoading(!1))).catch((e=>console.log(e)))})),b=new _("#profile-modal-box",(e=>{b.renderLoading(!0),u.setProfileData(e["profile-modal-username"],e["profile-modal-desc"]).then((e=>{m.setUserInfo(e),b.close()})).finally((()=>b.renderLoading(!1))).catch((e=>console.log(e)))}));function y(e){const t=new l(e,"#card-template",(()=>{p.open(e.name,e.link)}),(()=>{E.open(),E.setAction((()=>{E.renderLoading(!0),u.deleteCard(t._id).then((()=>{t.delete(),E.close()})).finally((()=>E.renderLoading(!1))).catch((e=>console.log(e)))}))}),(()=>{t.isLiked()?u.unlikeCard(t._id).then((e=>t.setIsLiked(e.isLiked))).catch((e=>console.log(e))):u.likeCard(t._id).then((e=>t.setIsLiked(e.isLiked))).catch((e=>console.log(e)))}));return t.generateCard()}const k=new class{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}addItem(e){this._container.append(e)}prependItem(e){this._container.prepend(e)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}}({items:[],renderer:()=>{}},".cards");k.renderItems();const f=new c(e,n),C=new c(e,r),g=new c(e,i);f.enableValidation(),C.enableValidation(),g.enableValidation(),t.addEventListener("click",(()=>{b.open();const{name:e,job:t}=m.getUserInfo();o.value=e,a.value=t})),s.addEventListener("click",(()=>{v.open()})),d.addEventListener("click",(()=>{L.open()})),b.setEventListeners(),v.setEventListeners(),p.setEventListeners(),E.setEventListeners(),L.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
!function(){"use strict";const e={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__input_error_visible"},t=document.querySelector("#edit-button"),s=document.querySelector(".profile__add-button"),r=document.querySelector("#profile__modal-form"),n=document.querySelector("#add-image__modal-form"),i=document.querySelector("#edit-avatar__pic-form"),o=document.querySelector("#profile-modal__input-name"),a=document.querySelector("#profile-modal__input-description"),l=document.querySelector(".profile__avatar-button"),d=document.querySelector(".profile__avatar");class c{constructor(e,t,s,r,n){let{name:i,link:o,id:a,likeStatus:l}=e;this._name=i,this._link=o,this._id=a,this._likeStatus=l,this._cardSelector=t,this._handleCardClick=s,this._handleDeleteCard=r,this._handleCardLike=n}_handleLikeButton(){this._cardElement.querySelector(".card__like-button").classList.toggle("card__like-button_clicked")}_setEventListeners(){this._cardElement.querySelector(".card__like-button").addEventListener("click",(()=>{this._handleLikeButton(),this._handleCardLike()})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._handleDeleteCard()})),this._cardElement.querySelector("#card-image-button").addEventListener("click",(()=>{this._handleCardClick({name:this._name,link:this._link})})),this._checkStatus()}delete(){this._cardElement.remove()}_checkStatus(){const e=this._cardElement.querySelector(".card__like-button");this._likeStatus?e.classList.add("card__like-button_clicked"):e.classList.remove("card__like-button_clicked")}generateCard(){this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0);const e=this._cardElement.querySelector(".card__caption"),t=this._cardElement.querySelector(".card__image");return e.textContent=this._name,t.setAttribute("alt",this._name),t.setAttribute("src",this._link),this._setEventListeners(),this._cardElement}}class h{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);t.textContent=e.validationMessage,t.classList.add(this._errorClass),e.classList.add(this._inputErrorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);t.textContent="",t.classList.remove(this._errorClass),e.classList.remove(this._inputErrorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(e){return!e.every((e=>e.validity.valid))}_toggleButtonState(){this._hasInvalidInput(this._inputList)?this._disableButton():(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.removeAttribute("disabled",!0))}_disableButton(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)}_setEventListeners(){this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._buttonElement=this._form.querySelector(this._submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(t=>{t.preventDefault(),this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault(),this._disableButton()})),this._setEventListeners()}}class u{constructor(e){this._modal=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}_handleEscClose(e){"Escape"===e.key&&this.close()}open(){this._modal.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._modal.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._modal.querySelector(".modal__exit-button").addEventListener("click",(()=>{this.close()})),this._modal.addEventListener("mousedown",(e=>{this._modal.classList.contains("modal_opened")&&e.target===this._modal&&this.close()}))}}class _ extends u{constructor(e,t){super(e),this._modalForm=this._modal.querySelector(".modal__form"),this._modalButton=this._modal.querySelector(".modal__button"),this._modalButtonText=this._modalButton.textContent,this._modalInputs=this._modalForm.querySelectorAll(".modal__input"),this._handleFormSubmit=t}_getInputValues(){const e=new FormData(this._modalForm);return Object.fromEntries(e)}renderLoading(e){this._modalButton.textContent=e?"Saving...":this._modalButtonText}setEventListeners(){this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}close(){super.close(),this._modalForm.reset()}}const m=new class{constructor(e){this.url=e.url,this.headers=e.headers}async getUserData(){return fetch(this.url+"/users/me",{method:"GET",headers:this.headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}async getInitialCards(){return fetch(this.url+"/cards",{method:"GET",headers:this.headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}async uploadCard(e,t){return fetch(this.url+"/cards",{method:"POST",headers:this.headers,body:JSON.stringify({name:e,link:t})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}async deleteCard(e){fetch(this.url+`/cards/${e}`,{method:"DELETE",headers:this.headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}async getCardsAndUserData(){return Promise.all([this.getInitialCards(),this.getUserData()])}async likeCard(e){return fetch(this.url+`/cards/${e}/likes`,{method:"PUT",headers:this.headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}async unlikeCard(e){return fetch(this.url+`/cards/${e}/likes`,{method:"DELETE",headers:this.headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}async setProfileData(e,t){return fetch(this.url+"/users/me",{method:"PATCH",headers:this.headers,body:JSON.stringify({name:e,about:t})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}async updateProfilePic(e){return fetch(this.url+"/users/me/avatar",{method:"PATCH",headers:this.headers,body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}}({url:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"a087da59-6aa1-4dbf-8a2c-982e97da6080","Content-Type":"application/json"}});m.getCardsAndUserData().then((e=>{e[0].forEach((e=>{const t=y({name:e.name,link:e.link,id:e._id,likeStatus:e.isLiked});f.addItem(t)}));const{avatar:t,about:s,name:r}=e[1];d.src=t,p.setUserInfo({name:r,about:s})}));const p=new class{constructor(e,t){this._nameElement=document.querySelector(e),this._jobElement=document.querySelector(t)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}setUserInfo(e){this._nameElement.textContent=e.name,this._jobElement.textContent=e.about}}("#user-name","#user-career"),E=new class extends u{constructor(e){super(e),this._modalImage=this._modal.querySelector(".modal__enlarged-image"),this._modalCaption=this._modal.querySelector(".modal__enlarged-text")}open(e,t){this._modalImage.setAttribute("src",t),this._modalImage.setAttribute("alt",e),this._modalCaption.textContent=e,super.open()}}("#enlarged-modal-box"),v=new class extends u{constructor(e,t){super(e),this._handleFormSubmit=t,this._modalForm=this._modal.querySelector(".modal__form"),this._submitButton=this._modalForm.querySelector(".modal__button")}open(e,t){super.open(),this._cardElement=e,this._id=t}close(){super.close()}setEventListeners(){this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._cardElement,this._id)})),super.setEventListeners()}}("#confirm-modal",(e=>{var t,s;t=e,s=e._id,m.deleteCard(s).then(t.delete()).catch((e=>console.log(e))),v.close()})),b=new _("#avatar-edit-modal",(e=>{b.renderLoading(!0),m.updateProfilePic(e["avatar-link"]).then((e=>d.src=e.avatar)).then(b.renderLoading(!1)).finally(b.close())})),k=new _("#add-modal-box",(e=>{k.renderLoading(!0),m.uploadCard(e["add-img-title"],e["add-img-link"]).then((e=>{const{name:t,link:s,_id:r,isLiked:n}=e;f.prependItem(y({name:t,link:s,id:r,likeStatus:n}))})).then(k.renderLoading(!1)).finally(k.close())})),S=new _("#profile-modal-box",(e=>{b.renderLoading(!0),m.setProfileData(e["profile-modal-username"],e["profile-modal-desc"]).then((e=>p.setUserInfo(e))).then(k.renderLoading(!1)).finally(S.close())}));function y(e){const t=new c(e,"#card-template",(()=>{E.open(e.name,e.link)}),(()=>{v.open(t,t._id)}),(()=>{e.likeStatus?m.unlikeCard(e.id).then((t=>{L(e,t.isLiked)})):m.likeCard(e.id).then((t=>{L(e,t.isLiked)}))}));return t.generateCard()}function L(e,t){e.likeStatus=t}S.setEventListeners(),k.setEventListeners(),E.setEventListeners(),v.setEventListeners(),b.setEventListeners();const f=new class{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}addItem(e){this._container.append(e)}prependItem(e){this._container.prepend(e)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}}({items:[],renderer:()=>{}},".cards");f.renderItems();const C=new h(e,n),g=new h(e,r),q=new h(e,i);C.enableValidation(),g.enableValidation(),q.enableValidation(),t.addEventListener("click",(()=>{S.open();const{name:e,job:t}=p.getUserInfo();o.value=e,a.value=t})),s.addEventListener("click",(()=>{k.open()})),l.addEventListener("click",(()=>{b.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,